require "open-uri"

class Malware < ActiveRecord::Base
  before_create :delete_previous
  
  # Inserting/deleting one entry at a time is painfully slow
  # Inserting in batches of 100 entries reduces time to ~1 minute
  @batch_size = 100
  
  # Fetch changes from google servers and store them in the database
  # Might be a slow operation, specially on the first run
  def self.update
    options = find(:first, :order => "created_at DESC")
    unless options
      options = self.new
      options.black_major ||= 1
      options.black_minor ||= -1
      options.malware_major ||= 1
      options.malware_minor ||= -1
      
      options.save
    end
    
    update_uri = "http://sb.google.com/safebrowsing/update?client=api" +
                 "&apikey=#{SAFEBROWSING_API_KEY}" +
                 "&version=goog-black-hash:#{options.black_major}:#{options.black_minor}," +
                 "goog-malware-hash:#{options.malware_major}:#{options.malware_minor}"

    logger.info("Updating malware info (#{options.black_major}.#{options.black_minor} #{options.malware_major}.#{options.malware_minor})")
    added = 0
    removed = 0
    to_add = []
    to_remove = []
    started = Time.now
    
    # FIXME: try batch inserts if performance becomes an issue
    open(update_uri) do |f|
      f.each_line do |line|
        if (line =~ /\[goog-black-hash (\d+).(\d+)/)
          options.black_major = $1
          options.black_minor = $2
          logger.info("Found new black version (#{options.black_major},#{options.black_minor})")
        elsif (line =~ /\[goog-malware-hash (\d+).(\d+)/)
          options.malware_major = $1
          options.malware_minor = $2
          logger.info("Found new malware version (#{options.malware_major}.#{options.malware_minor})")
        elsif (line =~ /\+([0-9a-f]{32})/)
          to_add << $1
          # MalwareHash.create(:url => $1)
          added += 1
        elsif (line =~ /-([0-9a-f]{32})/)
          to_remove << $1
          # MalwareHash.delete_all(["url = ?", $1])
          removed += 1
        end
        
        if to_add.size > @batch_size
          MalwareHash.add_batch(to_add)
          to_add = []
        end
        
        if to_remove.size > @batch_size
          MalwareHash.delete_batch(to_remove)
          to_remove = []
        end
        
      end
    end

    MalwareHash.add_batch(to_add)
    MalwareHash.delete_batch(to_remove)
    
    options.save
    logger.info("Updated malware info (in #{Time.now - started}s) +#{added}/-#{removed} (#{options.black_major}.#{options.black_minor} #{options.malware_major}.#{options.malware_minor})")
  end
  
  # Check a url against the malware database
  # URLs can be in any form:
  # * http://example.com/foo/bar.html
  # * example.com/foo/
  # * example.com
  def self.check(url)
    # Make sure url is according to http://code.google.com/apis/safebrowsing/developers_guide.html#ListFormat
    url.gsub!(/^https?:\/\//, '')
    url.downcase!
    alt_url = nil
    
    if url =~ /\//
      # Contains a /
      url =~ /^([^\/]+\/)/
      alt_url = $1
    else
      # Doesn't contain a slash -> hostname
      url += "/"
    end
    
    if MalwareHash.check(url)
      return true
    elsif alt_url
      return MalwareHash.check(alt_url)
    else
      return false
    end
  end
  
private

  def delete_previous
    Malware.delete_all
  end
end
